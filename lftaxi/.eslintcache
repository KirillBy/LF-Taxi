[{"/home/kirill/LF-Taxi/lftaxi/src/index.jsx":"1","/home/kirill/LF-Taxi/lftaxi/src/components/app/index.jsx":"2","/home/kirill/LF-Taxi/lftaxi/src/components/app/app.jsx":"3","/home/kirill/LF-Taxi/lftaxi/src/components/map/index.jsx":"4","/home/kirill/LF-Taxi/lftaxi/src/components/app-header/index.jsx":"5","/home/kirill/LF-Taxi/lftaxi/src/components/login/index.jsx":"6","/home/kirill/LF-Taxi/lftaxi/src/components/profile/index.jsx":"7","/home/kirill/LF-Taxi/lftaxi/src/components/profile/profile.jsx":"8","/home/kirill/LF-Taxi/lftaxi/src/components/map/map.jsx":"9","/home/kirill/LF-Taxi/lftaxi/src/components/login/login.jsx":"10","/home/kirill/LF-Taxi/lftaxi/src/components/app-header/app-header.jsx":"11","/home/kirill/LF-Taxi/lftaxi/src/components/registration-form/index.jsx":"12","/home/kirill/LF-Taxi/lftaxi/src/components/login-form/index.jsx":"13","/home/kirill/LF-Taxi/lftaxi/src/components/login-form/login-form.jsx":"14","/home/kirill/LF-Taxi/lftaxi/src/components/registration-form/registration-form.jsx":"15","/home/kirill/LF-Taxi/lftaxi/src/store/store.jsx":"16","/home/kirill/LF-Taxi/lftaxi/src/reducers/auth.jsx":"17","/home/kirill/LF-Taxi/lftaxi/src/actions/login.jsx":"18","/home/kirill/LF-Taxi/lftaxi/src/reducers/index.jsx":"19","/home/kirill/LF-Taxi/lftaxi/src/api/api.jsx":"20","/home/kirill/LF-Taxi/lftaxi/src/private-route.jsx":"21","/home/kirill/LF-Taxi/lftaxi/src/components/card-form/index.jsx":"22","/home/kirill/LF-Taxi/lftaxi/src/components/card-form/card-form.jsx":"23","/home/kirill/LF-Taxi/lftaxi/src/reducers/user.jsx":"24","/home/kirill/LF-Taxi/lftaxi/src/actions/user.jsx":"25","/home/kirill/LF-Taxi/lftaxi/src/saga/authSaga.jsx":"26","/home/kirill/LF-Taxi/lftaxi/src/saga/registrationSaga.jsx":"27","/home/kirill/LF-Taxi/lftaxi/src/components/order-form/index.jsx":"28","/home/kirill/LF-Taxi/lftaxi/src/components/order-form/order-form.jsx":"29","/home/kirill/LF-Taxi/lftaxi/src/actions/address.jsx":"30","/home/kirill/LF-Taxi/lftaxi/src/saga/addressSaga.jsx":"31","/home/kirill/LF-Taxi/lftaxi/src/reducers/addresses.jsx":"32","/home/kirill/LF-Taxi/lftaxi/src/actions/card.jsx":"33","/home/kirill/LF-Taxi/lftaxi/src/reducers/card.jsx":"34","/home/kirill/LF-Taxi/lftaxi/src/saga/paymentSaga.jsx":"35","/home/kirill/LF-Taxi/lftaxi/src/saga/routeSaga.jsx":"36"},{"size":392,"mtime":1610869681203,"results":"37","hashOfConfig":"38"},{"size":43,"mtime":1608909901781,"results":"39","hashOfConfig":"38"},{"size":915,"mtime":1610869681199,"results":"40","hashOfConfig":"38"},{"size":44,"mtime":1608909901781,"results":"41","hashOfConfig":"38"},{"size":63,"mtime":1608909901781,"results":"42","hashOfConfig":"38"},{"size":50,"mtime":1608909901781,"results":"43","hashOfConfig":"38"},{"size":56,"mtime":1608909901781,"results":"44","hashOfConfig":"38"},{"size":353,"mtime":1610869681199,"results":"45","hashOfConfig":"38"},{"size":1921,"mtime":1611263899302,"results":"46","hashOfConfig":"38"},{"size":1069,"mtime":1610869681199,"results":"47","hashOfConfig":"38"},{"size":1220,"mtime":1611166862853,"results":"48","hashOfConfig":"38"},{"size":84,"mtime":1608909901781,"results":"49","hashOfConfig":"38"},{"size":63,"mtime":1608909901781,"results":"50","hashOfConfig":"38"},{"size":3894,"mtime":1610995271697,"results":"51","hashOfConfig":"38"},{"size":5433,"mtime":1610995748716,"results":"52","hashOfConfig":"38"},{"size":731,"mtime":1611260624044,"results":"53","hashOfConfig":"38"},{"size":376,"mtime":1610869681203,"results":"54","hashOfConfig":"38"},{"size":317,"mtime":1610869681195,"results":"55","hashOfConfig":"38"},{"size":225,"mtime":1611165125617,"results":"56","hashOfConfig":"38"},{"size":1860,"mtime":1611260394831,"results":"57","hashOfConfig":"38"},{"size":424,"mtime":1610869681203,"results":"58","hashOfConfig":"38"},{"size":60,"mtime":1610869681199,"results":"59","hashOfConfig":"38"},{"size":7388,"mtime":1611251403189,"results":"60","hashOfConfig":"38"},{"size":311,"mtime":1610869681203,"results":"61","hashOfConfig":"38"},{"size":262,"mtime":1610887148110,"results":"62","hashOfConfig":"38"},{"size":501,"mtime":1611166756800,"results":"63","hashOfConfig":"38"},{"size":507,"mtime":1611165553917,"results":"64","hashOfConfig":"38"},{"size":63,"mtime":1610996576216,"results":"65","hashOfConfig":"38"},{"size":5128,"mtime":1611261476278,"results":"66","hashOfConfig":"38"},{"size":267,"mtime":1611260624044,"results":"67","hashOfConfig":"38"},{"size":442,"mtime":1611251924237,"results":"68","hashOfConfig":"38"},{"size":467,"mtime":1611260624044,"results":"69","hashOfConfig":"38"},{"size":564,"mtime":1611250354123,"results":"70","hashOfConfig":"38"},{"size":1146,"mtime":1611250354123,"results":"71","hashOfConfig":"38"},{"size":1675,"mtime":1611250443336,"results":"72","hashOfConfig":"38"},{"size":521,"mtime":1611261618949,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"rqbl6c",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"76"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"76"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"76"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"76"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"76"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"76"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"76"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"/home/kirill/LF-Taxi/lftaxi/src/index.jsx",[],["157","158"],"/home/kirill/LF-Taxi/lftaxi/src/components/app/index.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/components/app/app.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/components/map/index.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/components/app-header/index.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/components/login/index.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/components/profile/index.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/components/profile/profile.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/components/map/map.jsx",["159"],"/home/kirill/LF-Taxi/lftaxi/src/components/login/login.jsx",["160"],"import React, { useState } from 'react';\nimport LoginForm from '../login-form';\nimport './login.css';\nimport logo from '../../assets/icon-login.png'\nimport RegistrationForm from '../registration-form';\n\n\n\nconst Login = () => {\n\n    const [loginForm, setLoginForm] = useState(true);\n    const [registrationForm, setRegistrationForm] = useState(false);\n\n    const onRegistrationForm = () => {\n        setLoginForm(false);\n        setRegistrationForm(true);\n    }\n    \n    const onLoginForm = () => {\n        setLoginForm(true);\n        setRegistrationForm(false);\n    }\n\n        return (\n        <div className=\"login-container\">\n        <div className=\"login-flex\"> \n            <div className=\"login-logo-container\"  >\n                <img className=\"login-logo\" src={logo}/>\n            </div>\n            <div>\n            {loginForm && <LoginForm  onRegistrationForm={onRegistrationForm}/> }\n            {registrationForm && <RegistrationForm onLoginForm={onLoginForm}/> }                \n            </div>\n        </div>\n    </div>\n    )\n\n};\n\nexport default Login;","/home/kirill/LF-Taxi/lftaxi/src/components/app-header/app-header.jsx",["161"],"import React from 'react';\nimport './app-header.css';\nimport logo from '../../assets/icon.png'\nimport {connect} from 'react-redux' \nimport {logOut} from '../../actions/login'\nimport { useHistory } from \"react-router-dom\";\n\nconst AppHeader = ( {logOut}) => {\n\n    const onExit = () => {\n        logOut();\n        localStorage.removeItem('token');\n    }\n    const history = useHistory();\n\n    return (\n        <div className=\"app-header\" >\n                <nav className=\"navbar navbar-light bg-light\">\n                    <div>\n                        <img className=\"header-logo\" src={logo}/>\n                    </div>\n\n                    <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                        <button type=\"button\" className=\"btn btn-light\" onClick={() => history.push('/map')}>Карта</button>\n                        <button type=\"button\" className=\"btn btn-light\" onClick={() => history.push('/profile')}>Профиль</button>\n                        <button type=\"button\" className=\"btn btn-light\" onClick={onExit}>Выйти</button>\n                    </div>\n                </nav>\n        </div>\n    );\n};\n\nexport default connect(\n    null,\n    {logOut}\n)(AppHeader);","/home/kirill/LF-Taxi/lftaxi/src/components/registration-form/index.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/components/login-form/index.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/components/login-form/login-form.jsx",["162"],"import React, {useState, useEffect} from 'react';\nimport './login-form.css';\nimport { Typography, Grid, TextField, makeStyles, Container, Button, Link} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport {connect} from 'react-redux';\nimport {authenticate} from './../../actions/login';\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(3),\n    },\n    buttons: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    submit: {\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(1),\n        width: '25%',\n    },\n    paper: {\n        padding: '40px'\n    }\n\n}));\n\nconst LoginForm = ({ onRegistrationForm, authenticate, isLoggedIn}) => {\n\nLoginForm.propTypes = {\n    onRegistrationForm: PropTypes.func,\n};\n\nlet history = useHistory();\n\nconst [email, setEmail] = useState('')\nconst [password, setPassword] = useState('')\n\nuseEffect(() => {\n    if(isLoggedIn)\n    {\n        history.push(\"/map\");\n    }\n}, [isLoggedIn])\n\n\nconst onEmailChange = (e) => {\n    setEmail(e.target.value);\n  };\n\nconst onPasswordChange = (e) => {\n    setPassword(e.target.value);\n}\n\n\nconst onSubmit = (e) => {\n     e.preventDefault();\n     authenticate(email, password, history);\n}\n\nconst classes = useStyles();\nreturn (\n    <React.Fragment>\n        <Container component=\"main\" maxWidth=\"xl\" style={{backgroundColor:\"white\"}}>\n            <div className={classes.paper}>\n                <Typography component=\"h1\" variant=\"h4\">\n                    Войти\n                </Typography>\n                <div className=\"registration-row\">\n                    <Typography component=\"p\" className=\"new-user\">\n                        Новый пользователь? \n                    </Typography>\n                    <br/>\n                    <Link href=\"#\" onClick={onRegistrationForm}>\n                        Зарегистрируйтесь\n                    </Link>\n                </div>\n                <form name=\"login\" className={classes.form} noValidate>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                id=\"username\"\n                                label=\"Имя пользователя\"\n                                name=\"username\"\n                                onChange={onEmailChange}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                name=\"password\"\n                                label=\"Пароль\"\n                                type=\"password\"\n                                id=\"password\"\n                                onChange={onPasswordChange}\n                                autoComplete=\"current-password\"\n                            />\n                        </Grid>\n                    </Grid>\n                    <div className={classes.buttons}>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            className={classes.submit}\n                            style={{backgroundColor:\"orange\"}}\n                            onClick={onSubmit}\n                        >\n                            Войти\n                        </Button>\n                    </div>\n                </form>\n            </div>\n        </Container>\n    </React.Fragment>\n)\n};\n\nexport default connect(\n    (state) => ({isLoggedIn: state.auth.isLoggedIn }),\n    {authenticate}\n)(LoginForm);","/home/kirill/LF-Taxi/lftaxi/src/components/registration-form/registration-form.jsx",["163"],"import React, {useState, useEffect}  from 'react';\nimport './registration-form.css';\nimport { Typography, Grid, TextField, makeStyles, Container, Button, Link } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport {connect} from 'react-redux';\nimport {addUser} from './../../actions/user';\nimport { useHistory } from \"react-router-dom\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(3),\n    },\n    buttons: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    submit: {\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(1),\n        width: '25%',\n    },\n    paper: {\n        padding: '40px'\n    }\n\n}));\n\nconst RegistrationForm = ({onLoginForm, addUser, isLoggedIn }) => {\n    RegistrationForm.propTypes = {\n        onLoginForm: PropTypes.func,\n    };\n\n    let history = useHistory();\n\n    const [email, setEmail] = useState('')\n    const [name, setName] = useState('')\n    const [surname, setSurname] = useState('')\n    const [password, setPassword] = useState('')\n\n    useEffect(() => {\n        if(isLoggedIn)\n        {\n            history.push(\"/map\");\n        }\n    }, [isLoggedIn])\n\n    const onEmailChange = (e) => {\n        setEmail(e.target.value);\n    };\n    const onNameChange = (e) => {\n        setName(e.target.value);\n    };\n    const onSurnameChange = (e) => {\n        setSurname(e.target.value);\n    };\n    const onPasswordChange = (e) => {\n        setPassword(e.target.value);\n    }\n    const onSubmit = (e) => {\n        e.preventDefault();\n        addUser({email, password, name, surname});\n        \n   }\n\n    const classes = useStyles();\n    return (\n        <React.Fragment>\n            <Container component=\"main\" maxWidth=\"xs\" style={{ backgroundColor: \"white\" }}>\n                <div className={classes.paper}>\n                    <Typography component=\"h1\" variant=\"h4\">\n                        Регистрация\n                </Typography>\n                    <div className=\"registration-row\">\n                        <Typography component=\"p\" className=\"new-user\">\n                            Уже зарегистрированы?\n                    </Typography>\n                        <br />\n                        <Link href=\"#\" onClick={onLoginForm}>\n                            Войти\n                    </Link>\n                    </div>\n                    <form className={classes.form} noValidate>\n                        <Grid container spacing={3}>\n                            <Grid item xs={12}>\n                                <TextField\n                                    required\n                                    id=\"email\"\n                                    name=\"email\"\n                                    label=\"Адрес электронной почты\"\n                                    fullWidth\n                                    autoComplete=\"email\"\n                                    onChange={onEmailChange}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    required\n                                    id=\"firstName\"\n                                    name=\"firstName\"\n                                    label=\"Имя \"\n                                    fullWidth\n                                    onChange={onNameChange}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField \n                                required\n                                id=\"lastName\" \n                                name=\"lastName\" \n                                label=\"Фамилия\" \n                                fullWidth\n                                onChange={onSurnameChange} \n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Пароль\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"current-password\"\n                                    onChange={onPasswordChange}\n                                />\n                            </Grid>\n                        </Grid>\n                        <div className={classes.buttons}>\n                            <Button\n                                type=\"submit\"\n                                fullWidth\n                                variant=\"contained\"\n                                className={classes.submit}\n                                style={{ backgroundColor: \"orange\" }}\n                                onClick={onSubmit}\n                            >\n                                Войти\n                        </Button>\n                        </div>\n                    </form>\n                </div>\n            </Container>\n        </React.Fragment>\n    )\n};\n\n\nexport default connect(\n    (state) => ({isLoggedIn: state.auth.isLoggedIn }),\n    {addUser}\n)(RegistrationForm);","/home/kirill/LF-Taxi/lftaxi/src/store/store.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/reducers/auth.jsx",["164"],"import {LOG_IN, LOG_OUT } from '../actions/login'\n\nconst initialState = {\n    isLoggedIn: false\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case LOG_IN : {\n            return {isLoggedIn: true}\n        }\n        case LOG_OUT : {\n            return {isLoggedIn: false}\n        }\n        default:\n            return state\n    }\n}","/home/kirill/LF-Taxi/lftaxi/src/actions/login.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/reducers/index.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/api/api.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/private-route.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/components/card-form/index.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/components/card-form/card-form.jsx",["165"],"import React, {useEffect, useState} from 'react';\nimport './card-form.css';\nimport { Typography, Grid, TextField, makeStyles, Container, Button} from \"@material-ui/core\";\nimport {connect} from 'react-redux';\nimport {registerCard, getCardData} from './../../actions/card';\nimport { useHistory } from \"react-router-dom\";\nimport {MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(3),\n    },\n    buttons: {\n        display: 'flex',\n        justifyContent: 'space-around',\n    },\n    submit: {\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(1),\n        width: '25%',\n    },\n    mapButton: {\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(1),\n        width: '35%',\n    },\n    paper: {\n        padding: '40px',\n\n    },\n    profile: {\n        display: 'flex',\n        justifyContent: 'space-around'\n    },\n    pay: {\n        display: 'flex',\n        justifyContent: 'space-around'\n    },\n    cardGridGroup: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    success: {\n        marginTop: theme.spacing(5)\n    }\n    \n\n}));\n\nconst CardForm = ({\n    registerCard, \n    getCardData, \n    cardName,\n    expiryDate,\n    cardNumber,\n    cvc,\n    loading,\n    error,\n    isUpdated\n}) => {\n\nlet history = useHistory();\n\nconst [formFields, setFormField] = useState({\n    cardNumber: \"\",\n    cardName: \"\",\n    expiryDate: new Date(),\n    cvc: \"\",\n})\n\nconst onChange = (e) => {\n    setFormField({\n        ...formFields,\n        [e.target.name]: e.target.value\n    })\n}\n\nconst onDateChange = (date) => {\n    setFormField({\n        ...formFields,\n        expiryDate: date\n    })\n}\n\nuseEffect (() => {\n    getCardData();\n    if(error === null){\n        setFormField({cardNumber, expiryDate, cardName, cvc})\n    }\n    \n}, [getCardData,cardNumber, expiryDate, cardName, cvc])\n\nconst onSubmit = (e) => {\n     e.preventDefault();\n     registerCard(formFields)\n\n}\n\nconst onMap = () => {\n    history.push('/map');\n}\n\nconst classes = useStyles();\nreturn (\n    <React.Fragment>\n        <Container component=\"main\" maxWidth=\"xl\" style={{backgroundColor:\"white\"}}>\n            <div className={classes.paper}>\n                <div className={classes.profile}>\n                    <Typography component=\"h1\" variant=\"h4\">\n                        Профиль\n                    </Typography>\n                 </div>\n                <div className={classes.pay}>\n                    <Typography component=\"p\">\n                        Способ оплаты \n                    </Typography>\n                </div>\n                {loading ? (\n                    <Typography variant=\"body1\">Loading....</Typography>\n                ): null}\n                {error ? (\n                    <Typography color=\"error\">{error}</Typography>\n                ): null}\n                {!isUpdated ? (\n                <form name=\"login\" className={classes.form} noValidate>\n                    <div className={classes.cardGridGroup}>\n                    <Grid container spacing={2} xl={10}  >\n                        <Grid item >\n                            <TextField\n                                required\n                                fullWidth\n                                id=\"cardNumber\"\n                                label=\"Номер карты\"\n                                value={formFields.cardNumber}               \n                                name=\"cardNumber\"\n                                onChange={onChange}\n                            />\n                        </Grid>\n                        <Grid item xl={10}>\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                        <KeyboardDatePicker \n                            id=\"date-picker-dialog\"\n                            label=\"Expire date\"\n                            name=\"Expire date\"\n                            views={[\"year\", \"month\"]}\n                            format=\"MM/yyyy\"\n                            value={formFields.expiryDate}\n                            onChange={onDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                         </MuiPickersUtilsProvider>\n                        </Grid>\n                    </Grid>\n                    <Grid container spacing={2}>\n                        <Grid item xl={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                value={formFields.cardName}\n                                id=\"cardName\"\n                                label=\"Имя владельца\"\n                                name=\"cardName\"\n                                onChange={onChange}\n                            />\n                        </Grid>\n                        <Grid item xl={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                value={formFields.cvc}\n                                name=\"cvc\"\n                                label=\"CVC\"\n                                type=\"cvc\"\n                                id=\"cvc\"\n                                onChange={onChange}\n                            />\n                        </Grid>\n                    </Grid>\n                    </div>\n                    <div className={classes.buttons}>       \n                       <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            className={classes.submit}\n                            style={{backgroundColor:\"orange\"}}\n                            onClick={onSubmit}\n                        >\n                            Сохранить\n                        </Button>\n                    </div>\n                </form>)\n                :\n                <div className={classes.success}>\n                    <p>Платёжные данные обновлены. Теперь вы можете заказывать такси.</p>\n                    <div className={classes.buttons}>       \n                       <Button\n                            fullWidth\n                            variant=\"contained\"\n                            className={classes.mapButton}\n                            style={{backgroundColor:\"orange\"}}\n                            onClick={onMap}\n                        >\n                            Перейти на карту\n                        </Button>\n                    </div>\n                </div>\n                }\n                \n            </div>\n        </Container>\n    </React.Fragment>\n)\n};\n\nexport default connect(\n    (state) => ({\n        cardName: state.card.cardName,\n        expiryDate: state.card.expiryDate,\n        cardNumber: state.card.cardNumber,\n        cvc: state.card.cvc,\n        loading: state.card.loading,\n        error: state.card.error,\n        isUpdated: state.card.isUpdated\n         }),\n    {registerCard, getCardData}\n)(CardForm);","/home/kirill/LF-Taxi/lftaxi/src/reducers/user.jsx",["166"],"import {ADD_USER_CARD } from '../actions/user'\n\nconst initialState = {\n    userCard: null\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case ADD_USER_CARD : {\n            return {userCard: action.payload}\n        }\n        default:\n            return state\n    }\n}","/home/kirill/LF-Taxi/lftaxi/src/actions/user.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/saga/authSaga.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/saga/registrationSaga.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/components/order-form/index.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/components/order-form/order-form.jsx",["167","168","169"],"import React, {useState, useEffect} from 'react';\nimport './order-form.css';\nimport { FormControl, Grid, TextField, makeStyles, Container, Button, InputLabel, Select, MenuItem} from \"@material-ui/core\";\nimport {connect} from 'react-redux';\nimport {getAddresses, getRoute} from './../../actions/address';\nimport { useHistory } from \"react-router-dom\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(3),\n    },\n\n    submit: {\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(1),\n        width: '100%',\n    },\n    paper: {\n        padding: '40px'\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: '100%',\n    },\n    selectEmpty: {\n    marginTop: theme.spacing(2),\n    },  \n\n}));\n\nconst OrderForm = ({getAddresses, getRoute, isLoggedIn, listAddresses}) => {\n\nlet history = useHistory();\n\nconst [startPoint, setStartPoint] = useState('')\nconst [destPoint, setDestPoint] = useState('')\nconst [startOpen, setStartOpen] = useState(false)\nconst [distOpen, setDistOpen] = useState(false)\n\nuseEffect(() => {    \n    getAddresses();\n\n}, [isLoggedIn])\n\n\nconst onStartPointChange = (e) => {\n    setStartPoint(e.target.value);\n  };\n\nconst onDestPointChange = (e) => {\n    setDestPoint(e.target.value);\n}\n\nconst handleStartClose = () => {\n    setStartOpen(false);\n  };\n\n  const handleStartOpen = () => {\n    setStartOpen(true);\n  };\n\nconst handleDistClose = () => {\n    setDistOpen(false);\n  };\n\n  const handleDistOpen = () => {\n    setDistOpen(true);\n  };\n\n\nconst onSubmit = (e) => {\n     e.preventDefault();\n    getRoute({startPoint, destPoint});\n}\n\nconst classes = useStyles();\nreturn (\n    <React.Fragment>\n        <Container component=\"main\" maxWidth=\"xl\" style={{backgroundColor:\"white\"}}>\n            <div className={classes.paper}>\n                <form name=\"login\" className={classes.form} noValidate>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <FormControl className={classes.formControl}>\n                            <InputLabel id=\"demo-controlled-open-select-label\">Откуда</InputLabel>\n                            {listAddresses !== null ? (\n                            <Select\n                                labelId=\"demo-controlled-open-select-label\"\n                                id=\"startPoint\"\n                                value={startPoint}\n                                open={startOpen}\n                                onClose={handleStartClose}\n                                onOpen={handleStartOpen}\n                                onChange={onStartPointChange}\n                            >                               \n                                {listAddresses.filter((name) => name !== destPoint).map((name) => (\n                                <MenuItem key={name} value={name}>\n                                    {name}\n                                </MenuItem>\n                                ))}\n\n                            </Select>) : null}\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <FormControl className={classes.formControl}>\n                            <InputLabel id=\"demo-controlled-open-select-label\">Куда</InputLabel>\n                            {listAddresses !== null ? (\n                            <Select\n                                labelId=\"demo-controlled-open-select-label\"\n                                id=\"destPoint\"\n                                value={destPoint}\n                                open={distOpen}\n                                onClose={handleDistClose}\n                                onOpen={handleDistOpen}\n                                onChange={onDestPointChange}\n                            >\n                                {listAddresses.filter((name) => name !== startPoint).map((name) => (\n                                <MenuItem key={name} value={name}>\n                                    {name}\n                                </MenuItem>\n                                ))}\n\n                                </Select>) : null}\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n                    <div className={classes.buttons}>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            className={classes.submit}\n                            style={{backgroundColor:\"orange\"}}\n                            onClick={onSubmit}\n                        >\n                            Заказать\n                        </Button>\n                    </div>\n                </form>\n            </div>\n        </Container>\n    </React.Fragment>\n)\n};\n\nexport default connect(\n    (state) => ({\n        isLoggedIn: state.auth.isLoggedIn,\n        listAddresses: state.addresses.listAddresses,\n     }),\n    {getAddresses, getRoute}\n)(OrderForm);","/home/kirill/LF-Taxi/lftaxi/src/actions/address.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/saga/addressSaga.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/reducers/addresses.jsx",["170","171"],"import {addRoute, addAddresses} from '../actions/address'\n\nconst initialState = {\n    listAddresses: null,\n    route: null\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case addAddresses.toString(): {\n            return {...state, listAddresses: action.payload}\n        }\n        case addRoute.toString(): {\n            return {...state, route: action.payload}\n        }\n        default:\n            return state\n    }\n}","/home/kirill/LF-Taxi/lftaxi/src/actions/card.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/reducers/card.jsx",["172"],"import {registerCardStart, registerCardError,\n    setCardData, getCardDataStart, getCardDataError, setCardUpdated } from \"../actions/card\";\n\nconst initialState = {\n    cardNumber: '',\n    cardName: '',\n    cvc: '',\n    expiryDate: '',\n    error: null,\n    loading: false,\n    isUpdated: false,\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case getCardDataStart.toString(): {\n            return {...state, loading: true, error: null}\n        }\n        case setCardData.toString(): {\n            return {...state, ...action.payload, loading: false, error: null}\n        }\n        case getCardDataError.toString(): {\n            return {...state, loading: false, error: action.payload.error}\n        }\n        case registerCardStart.toString(): {\n            return {...state, loading: true, error: null}\n        }\n        case registerCardError.toString(): {\n            return {...state, loading: false, error: action.payload.error}\n        }\n        case setCardUpdated.toString(): {\n            return {...state, isUpdated: true}\n        }\n    \n        default:\n            return state;\n    }\n}","/home/kirill/LF-Taxi/lftaxi/src/saga/paymentSaga.jsx",[],"/home/kirill/LF-Taxi/lftaxi/src/saga/routeSaga.jsx",[],{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":14,"column":15,"nodeType":"179","endLine":19,"endColumn":11},{"ruleId":"180","severity":1,"message":"181","line":28,"column":17,"nodeType":"182","endLine":28,"endColumn":57},{"ruleId":"180","severity":1,"message":"181","line":20,"column":25,"nodeType":"182","endLine":20,"endColumn":66},{"ruleId":"177","severity":1,"message":"183","line":45,"column":4,"nodeType":"184","endLine":45,"endColumn":16,"suggestions":"185"},{"ruleId":"177","severity":1,"message":"183","line":47,"column":8,"nodeType":"184","endLine":47,"endColumn":20,"suggestions":"186"},{"ruleId":"187","severity":1,"message":"188","line":7,"column":1,"nodeType":"189","endLine":18,"endColumn":2},{"ruleId":"177","severity":1,"message":"190","line":100,"column":4,"nodeType":"184","endLine":100,"endColumn":55,"suggestions":"191"},{"ruleId":"187","severity":1,"message":"188","line":7,"column":1,"nodeType":"189","endLine":15,"endColumn":2},{"ruleId":"192","severity":1,"message":"193","line":3,"column":29,"nodeType":"194","messageId":"195","endLine":3,"endColumn":38},{"ruleId":"192","severity":1,"message":"196","line":35,"column":5,"nodeType":"194","messageId":"195","endLine":35,"endColumn":12},{"ruleId":"177","severity":1,"message":"197","line":45,"column":4,"nodeType":"184","endLine":45,"endColumn":16,"suggestions":"198"},{"ruleId":"192","severity":1,"message":"199","line":1,"column":9,"nodeType":"194","messageId":"195","endLine":1,"endColumn":21},{"ruleId":"187","severity":1,"message":"188","line":7,"column":1,"nodeType":"189","endLine":15,"endColumn":2},{"ruleId":"187","severity":1,"message":"188","line":14,"column":1,"nodeType":"189","endLine":38,"endColumn":2},"no-native-reassign",["200"],"no-negated-in-lhs",["201"],"react-hooks/exhaustive-deps","Assignments to the 'map' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["202"],["203"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","React Hook useEffect has a missing dependency: 'error'. Either include it or remove the dependency array.",["204"],"no-unused-vars","'TextField' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAddresses'. Either include it or remove the dependency array. If 'getAddresses' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["205"],"'getAddresses' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"206","fix":"207"},{"desc":"206","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},"Update the dependencies array to be: [history, isLoggedIn]",{"range":"213","text":"214"},{"range":"215","text":"214"},"Update the dependencies array to be: [getCardData, cardNumber, expiryDate, cardName, cvc, error]",{"range":"216","text":"217"},"Update the dependencies array to be: [getAddresses, isLoggedIn]",{"range":"218","text":"219"},[1062,1074],"[history, isLoggedIn]",[1196,1208],[2201,2252],"[getCardData, cardNumber, expiryDate, cardName, cvc, error]",[1141,1153],"[getAddresses, isLoggedIn]"]